module Stackist.Parser(parse) where

--import Stackist.Interpreter1(redex, Expr(Numeric, Literal, JString, Quote))
import System.Environment(getArgs)


import Control.Applicative ((<*>), (*>), (<$>), pure)

import Text.ParserCombinators.Parsec

-- Distinct things to parse
-- foo       a literal
-- +         a literal
-- foo%foo   a single literal
-- "foo"     a string
-- [1, 2, 3] a quotation
-- [concat]  a quotation
-- :foo bar  a definition for foo
-- : foo bar a definition for foo

csvFile :: GenParser Char st [[String]]
csvFile =
    do result <- many line
       eof
       return result

-- Each line contains 1 or more cells, separated by a comma
line :: GenParser Char st [String]
line =
    do result <- cells
       eol                       -- end of line
       return result

-- Build up a list of cells.  Try to parse the first cell, then figure out
-- what ends the cell.
cells :: GenParser Char st [String]
cells =
    do first <- cellContent
       next <- remainingCells
       return (first : next)

-- The cell either ends with a comma, indicating that 1 or more cells follow,
-- or it doesn't, indicating that we're at the end of the cells for this line
remainingCells :: GenParser Char st [String]
remainingCells =
    (char ',' >> cells)            -- Found comma?  More cells coming
    <|> (return [])                -- No comma?  Return [], no more cells

-- Each cell contains 0 or more characters, which must not be a comma or
-- EOL
cellContent :: GenParser Char st String
cellContent =
    many (noneOf ",\n")


-- The end of line character is \n
eol :: GenParser Char st Char
eol = char '\n'

parseCSV :: String -> Either ParseError [[String]]
parseCSV input = parse csvFile "(unknown)" input


endOfFn :: GenParser Char st Char
endOfFn = char '.'

fnContent :: GenParser Char st Char
fnContent = many (noneOf ".")


-- parse ": word hello" => [DEFINE "word", Quote [Literal "hello"]]
-- parse "hello" => [Literal "hello]
-- parse "1" => [Numeric 1]

-- parse "foo bar" => [Literal "foo", Literal "bar"]
-- parse "1 2 +" => [Numeric 1, Numeric 2, Literal "+"]
-- parse "[1]" => [Quote [Numeric 1]]
-- parse "\"hey\"" => [JString "hey"]
-- parse """["b", "c", "d"], "a", [concat], fold""" => [Quote [JString "b", JString "c", JString "d"], JString "a", Quote [Literal "concat"], Literal "fold"]

-- symbol :: Parser Char
-- symbol = oneOf "!#$%&|*+-/:<=>?@^_~"

readExpr :: String -> String
-- readExpr input = case parse symbol "stackist" input of
--                    Left err -> "No match: " ++ show err
--                    Right val -> "Found value"
readExpr = id


main :: IO ()
main = do
  args <- getArgs
  putStrLn (readExpr (args !! 0))
